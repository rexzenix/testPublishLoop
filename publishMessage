package com.mainclass

import com.google.api.core.ApiFuture
import com.google.api.core.ApiFutures
import com.google.api.gax.rpc.ApiException
import com.google.cloud.pubsub.v1.Publisher
import com.google.cloud.pubsub.v1.TopicAdminClient
import com.google.protobuf.ByteString
import com.google.pubsub.v1.PubsubMessage
import com.google.pubsub.v1.TopicName
import java.io.*

const val usage1 = """
    The input to the program can be any of the below commands:
    -  create <topic> |
    -  pub <topic> |
    """

private val projectId = "big-fawn"

private val actions = mapOf(
    "create" to ::createTopic,
    "pub" to ::publishMsg,
)

private fun createTopic(vararg args: String) { // expects 1 arg: <topic> to create

    if (args.isEmpty()) {
        error("Bad input: command 'create-topic' expects 1 argument. \n $usage1")
    }

    // Your topic ID, eg. "my-topic"
    val topicId = args[0]

    val topic = TopicName.of(projectId, topicId)

    try {
        TopicAdminClient.create().use { topicAdminClient -> topicAdminClient.createTopic(topic) }
        println("Topic ${topic.project}:${topic.topic} successfully created.")
    } catch (e: ApiException) {
        // example : code = ALREADY_EXISTS(409) implies topic already exists
        println(e.statusCode.code)
    }
}



private fun publishMsg(vararg args: String) { // expects 1 args: <topic>

    if (args.size < 1) {
        error("Bad input: command 'sub' expects 2 arguments. \n $usage1")
    }
    val topicId = args[0]
    val file = File("C:\\Users\\rakaz\\Documents\\publish pubsub\\bgp-updates.20221026.0000.txt")
    var fis: FileInputStream? = null
    var bis: BufferedInputStream? = null
    var dis: DataInputStream? = null
    var counter = 0
    val topicName = TopicName.of(projectId, topicId)
    lateinit var publisher: Publisher
    val futures: MutableList<ApiFuture<String>> = mutableListOf()

    try {
        // Create a publisher instance with default settings bound to the topic
        publisher = Publisher.newBuilder(topicName).build()

        fis = FileInputStream(file)
        bis = BufferedInputStream(fis)
        dis = DataInputStream(bis)
        while (dis.available() >= counter && counter < 100000) {
            counter++
            val message = dis.readLine()

            // convert message to bytes
            val data = ByteString.copyFromUtf8(message)
            val pubsubMessage = PubsubMessage.newBuilder()
                .setData(data)
                .build()
            // Schedule a message to be published. Messages are automatically batched.
            val future = publisher.publish(pubsubMessage)
            futures.add(future)
        }

    } finally {
        // Wait on any pending requests
        println("Published following messages (IDs):")
        val messageIds = ApiFutures.allAsList(futures).get()
        messageIds.forEach { messageId -> println(messageId) }
        publisher.shutdown()
    }
}

fun main (vararg args: String) {
    when {
        args.isEmpty() -> println("Command incomplete: please provide the pubsub action to execute and its arguments! \n ${usage1}1")

        args[0] == "usage" -> println(usage)

        !actions.containsKey(args[0]) -> println("Bad command: action not found! \n $usage1")

        else -> {
            val actionArgs = args.copyOfRange(1, args.size)
            actions[args[0]]?.invoke(actionArgs)
        }

    }
}
